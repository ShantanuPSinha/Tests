#!/usr/bin/python3

## Can Accept indeterminate amount of input files. Cleans it up and outputs to another file
##
## If you want to exclude the Ecosystem field from the generated output json, change the 
## bool to False

## Example Usage ./combine_datasets maven_packages.ndjson pypi_packages.ndjson npm_packages.ndjson bell.ndjson

import argparse
import json
import re2 as r

include_ecosystem = True

def convert_to_ndjson(input_files, output_file):
    combined_data = []

    for input_file in input_files:
        with open(input_file) as f:
            input_data = [json.loads(line) for line in f]
            combined_data.extend(input_data)

    with open(output_file, 'w') as output:
        for data in combined_data:
            name = data.get('package_name')
            repo = data.get('package_repo')
            ecosys = data.get('package_ecosystem')

            if name is None:
                continue

            if not bool(r.match(r'^https?://github\.com/', repo)):
                continue

            license_info = data.get('package_licenses')

            # Handle null or empty lists for licenses
            if license_info in (None, []):
                license_info = None
            else:
                license_info = license_info.get('Normalised License')

            language = data.get('package_language')
            valid = True
            
            if include_ecosystem:
                final_json = {
                    "name": name,
                    "repo": repo,
                    "license": license_info,
                    "language": language,
                    "valid": valid,
                    "ecosystem": ecosys
                }

            else:
                final_json = {
                    "name": name,
                    "repo": repo,
                    "license": license_info,
                    "language": language,
                    "valid": valid,
                }

            output.write(json.dumps(final_json) + "\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert input JSON data to NDJSON format.")
    parser.add_argument("input_files", nargs='+', help="Paths to the input data files.")
    parser.add_argument("output_file", help="Path to the output NDJSON file.")

    args = parser.parse_args()

    convert_to_ndjson(args.input_files, args.output_file)
